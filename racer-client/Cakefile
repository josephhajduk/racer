fs = require 'fs'
{exec} = require 'child_process'
filewalk = require 'file'

option '-o', '--output [DIR]', 'directory for compiled code'
option '-p', '--platform [DIR]', 'platform ("-cocoonjs")'

appFiles = []

filewalk.walkSync "coffee/", (dirPath, dirs, files) ->
  for f in files
    appFiles.push("#{dirPath}/#{f}")

copyfolder = (from,to) ->
  filewalk.walkSync from, (dirPath, dirs, files)->
    for f in files
      exec "mkdir -p #{to}/#{dirPath}/"
      exec "cp #{dirPath}/#{f} #{to}/#{dirPath}/#{f}"

task 'build:clean', "clean build folder", (options) ->
  console.log "Clearing build director"
  exec "rm -rf build/"
  exec "mkdir build/"

task 'build:client', "build the html5 client", (options) ->

  console.log "Clearing build director"
  exec "rm -rf build/"
  exec "mkdir build/"

  console.log "Building Client into #{options.output}"

  console.log "Copying JS"
  copyfolder "js/",options.output

  console.log "Concatenating coffeescript"

  appContents = new Array
  remaining = appFiles.length

  for file, index in appFiles then do (file, index) ->
    fs.readFile "#{file}", 'utf8', (err, fileContents) ->
      throw err if err
      appContents[index] = fileContents
      process() if --remaining is 0

  console.log "Compiling coffeescript"

  process = ->
    fs.writeFile options.output+"/app.coffee", appContents.join('\n\n'), 'utf8', (err) ->
      throw err if err
      exec "/usr/local/bin/node /usr/local/bin/coffee --compile --output #{options.output}/js/ #{options.output}/app.coffee", (err, stdout, stderr) ->
        throw err if err
        console.log stdout + stderr
        fs.unlink "#{options.output}/app.coffee", (err) ->
          throw err if err
          console.log 'Done.'

  console.log "Copying CSS"
  copyfolder "css/",options.output

  console.log "Copying plain resources"
  filewalk.walkSync "resources/plain", (dirPath, dirs, files)->
    for f in files
      exec "cp #{dirPath}/#{f} #{options.output}/#{f}"

  console.log "Copying HTML"
  options.platform ?= ""
  fs.createReadStream("html/index#{options.platform}.html").pipe(fs.createWriteStream("#{options.output}/index.html"));


