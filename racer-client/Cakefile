fs = require 'fs'
{exec} = require 'child_process'
filewalk = require 'file'
connect = require 'connect'

option '-o', '--output [DIR]', 'directory for compiled code'
option '-p', '--platform [DIR]', 'platform ("-cocoonjs")'

appFiles = []

jsFiles = [
]

filewalk.walkSync "coffee/", (dirPath, dirs, files) ->
  for f in files
    appFiles.push("#{dirPath}/#{f}")

task 'host', "host with node connect", (options) ->
  console.log "starting web server"
  connect()
    .use(connect.static('build'))
    .listen(8080)

task 'build:clean', "clean build folder", (options) ->
  console.log "Clearing build director"
  exec "rm -rf build/"
  exec "mkdir build/"

task 'build:client', "build the html5 client", (options) ->

  console.log "Building Client into #{options.output}"

  console.log "Copying JS"
  filewalk.walkSync "js/", (dirPath, dirs, files)->
    for f in files when f.indexOf(".js", this.length - ".js".length) != -1
      exec "mkdir -p #{options.output}/#{dirPath}/"
      exec "cp #{dirPath}/#{f} #{options.output}/#{dirPath}/#{f}"

  console.log "Concatenating coffeescript"

  appContents = new Array
  remaining = appFiles.length

  for file, index in appFiles then do (file, index) ->
    fs.readFile "#{file}", 'utf8', (err, fileContents) ->
      throw err if err
      appContents[index] = fileContents
      process() if --remaining is 0

  console.log "Compiling coffeescript"

  process = ->
    fs.writeFile "app.coffee", appContents.join('\n\n'), 'utf8', (err) ->
      throw err if err
      exec "/usr/local/bin/node /usr/local/bin/jasmine-node --coffee specs" , (err, stdout, stderr) ->
        throw err if err
        console.log stdout + stderr
      exec "/usr/local/bin/node /usr/local/bin/coffee --compile --output #{options.output}/js/ app.coffee", (err, stdout, stderr) ->
        throw err if err
        console.log stdout + stderr
        #fs.unlink "#{options.output}/app.coffee", (err) ->
        #  throw err if err
        #  console.log 'Done.'

  console.log "Copying CSS"
  filewalk.walkSync "css/", (dirPath, dirs, files)->
    for f in files when f.indexOf(".css", this.length - ".css".length) != -1
      exec "mkdir -p #{options.output}/#{dirPath}/"
      exec "cp #{dirPath}/#{f} #{options.output}/#{dirPath}/#{f}"

  console.log "Copying plain resources"
  filewalk.walkSync "resources/plain", (dirPath, dirs, files)->
    for f in files
      exec "cp #{dirPath}/#{f} #{options.output}/#{dirPath.replace("resources/plain","")}/#{f}"

  # start resource.list
  exec "echo fileexists >> #{options.output}/resources/resources.js" #UGLY HACK
  exec "echo var racer_resources_json = [ > #{options.output}/resources/resources.js"

  console.log "Processing complex resources"
  filewalk.walkSync "resources/complex/", (dirPath, dirs, files)->
    for f in files when f.indexOf(".coffee", this.length - ".coffee".length) != -1
      complex = require("./#{dirPath}/#{f}")
      complex.process(options)

  exec "sed -i '$s/,$//' #{options.output}/resources/resources.js"

  # end resource.list
  exec "echo ] >> #{options.output}/resources/resources.js"

  console.log "Copying HTML"
  options.platform ?= ""
  fs.createReadStream("html/index#{options.platform}.html").pipe(fs.createWriteStream("#{options.output}/index.html"));



